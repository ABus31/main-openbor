 Function description:

- block {int}
 Sets blocking status
 0 = block status is off
 1 = block status is on

- move {x} {z} {y}
 Teleports with certain distance
 x = x movement
 z = z movement
 y = y movement


- dasher {x} {y} {z}
 Dash with desired speed. Similar to 'jumpframe' with no frame requirement
 x = x speed
 y = y speed
 z = z speed

- leaper {x} {y} {z}
 Jump with desired speed. Same as 'jumpframe' with no frame requirement
 x = x speed
 y = y speed
 z = z speed

- clearL
 Clears all local variables

- keyint {animation} {frame} {key} {hold} {minhealth}
 Change current animation if defined key is pressed or released provided HP is more than minimum health
 animation = animation to change to
 frame = frame to start
 key = key to press or release. Accepted values are:
  "U" = Up
  "D" = Down
  "J" = Jump
  "A" = Attack
  "S" = Special
  "A2" = Attack2
 hold = hold/release flag.
  0 = Hold
  1 = Release
 minhealth = Minimum health char must have

- keyflip
 Change facing direction if left or right is pressed

- shoot {projectilename} {x} {y} {z}
 Shoot projectile from certain distance. Same as 'throwframe' without frame requirement
 projectilename = name of shot projectile
 x = x distance relative to char
 y = y distance relative to char
 z = z distance relative to char

- toss {bombname} {x} {y} {z}
 Toss bomb from certain distance. Same as 'tossframe' without frame requirement
 projectilename = name of shot projectile
 x = x distance relative to char
 y = y distance relative to char
 z = z distance relative to char




=====================


anim	pain
	loop	0
	bbox	0 0 0 0
	delay	5
	offset	60 102
	@cmd	increasehealth 200
	@cmd	buymp 1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif
	@cmd	buymp -1
	frame	Data/chars/misc2/scr/buymp.gif

void buymp(int amount)
{
  //v0.10
  void vSelf  = getlocalvar("self");
  if ( checkent(vSelf) == 1 ) {
  void target = getentityproperty(vSelf, "opponent");
  int cost = 355;

  void P1 = getplayerproperty(0, "entity"); //Get Player 1
  void P2 = getplayerproperty(1, "entity"); //Get Player 2
  void P3 = getplayerproperty(2, "entity"); //Get Player 3
  void P4 = getplayerproperty(3, "entity"); //Get Player 4

  void Health = getentityproperty(target,"maxhealth");

  int maxMP = 0;
  int moneyamount = 0;
  int canbuy = 0;
    if (target == P1)
    { maxMP = getvmp(0);
      moneyamount = getvscore(0); } else
    if (target == P2)
    { maxMP = getvmp(1);
      moneyamount = getvscore(1); } else
    if (target == P3)
    { maxMP = getvmp(2);
      moneyamount = getvscore(2); } else
    if (target == P4)
    { maxMP = getvmp(3);
      moneyamount = getvscore(3); }

  if ( moneyamount - cost > 0){ canbuy = 1; }

  if ( amount > 0 )
  {
    if (canbuy == 1)
    {
    if (target == P1)
    { setvmp(0,maxMP+amount);
      setvscore(0,moneyamount-cost); } else
    if (target == P2)
    { setvmp(1,maxMP+amount);
      setvscore(1,moneyamount-cost); } else
    if (target == P3)
    { setvmp(2,maxMP+amount);
      setvscore(2,moneyamount-cost); } else
    if (target == P4)
    { setvmp(3,maxMP+amount);
      setvscore(3,moneyamount-cost);  }
    increasemaxmpforentity( target, (amount*5) );
    //drawstring(200, 136, 1, "Added Maximum Mp: " + (maxMP*5) );
    } else {
      //drawstring(200, 136, 1, "Not Enough Gold!" );
    }
    drawguiforplayer(target);
  } else {
    settextobj(12, 200, 126, 1, 1, "Added Maximum Mp: " + (maxMP*5), openborvariant("elapsed_time")+200);
    settextobj(13, 200, 136, 1, 1, "Cost: " + cost, openborvariant("elapsed_time")+200);
    /*
    //drawstring(200, 136, 1, "Player Max health at " + (Health+(maxhealth*5)) );
    drawstring(200, 136, 1, "Added Maximum Mp: " + (maxMP*5) );
    drawstring(200, 146, 1, "Cost: " +  cost );
    drawstring(200, 156, 1, "Gold: " + moneyamount );
    */
  }
  }
}

=================


void loadallentities2(int t)//(int amount)
{ //Matman v0.10
  void vSelf  = getlocalvar("self");
  if ( checkent(vSelf) == 1 ) {
  void target = getentityproperty(vSelf, "opponent");
  int cost = 100;

  void b = 0;
  settextobj(12, 200, 126, 1, 1, "Entities Loaded." , openborvariant("elapsed_time")+200);
  if ( t == 1 ) {loadmodel("GROUNDER"); b = 1; }
  if ( t == 1 ) {loadmodel("GROUNDER_"); b = 1; }
  if ( t == 1 ) {loadmodel("GROUNDER__"); b = 1; }

  if ( b == 1 ) {
    settextobj(12, 100, 60, 1, 1, "Character Unlocked" , openborvariant("elapsed_time")+100);
  }
}